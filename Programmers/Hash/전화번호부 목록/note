시퀀스 컨테이너
vector , list deque와 같이 순서대로 자료 보관

연관 컨테이너
어떤 key와 짝을 이루어 자료를 보관
자료를 넣고, 빼고, 찾을 때 key 필요.
  -많지 않은 자료를 보관하는 경우
  -검색 속도 중요한 경우 
  -대량의 자료를 저장
  -빠르게 검색하기 위해
연관 컨테이너는 map, set, hash_map, hash_set이 있습니다. 
중복되는 key 값을 사용할 경우 앞에 'multi'를 붙여 사용됩니다. 
multi_map, multi_set, hash_multimap, hash_multiset


map, set 컨테이너 -> 자료를 정렬하여 저장, 정렬된 순서대로 순회

hash ->정렬필요없으며 빠른 검색을 원할때
hash_map의 자료구조는 '해시 테이블'
해시테이블에 자료 저장할 땐
key값을 해시에 대입해 버킷번호 나오면 그 버킷의 빈 슬롯에 자료를 저장
많은 자료 저장해도 삽입,삭제,검색 속도 거의 일정

hash_map 사용법
#include<hash_map>
using namespace stdext;
hash_map<key 자료타입 , value 자료 타입> 변수이름
ex) hash_map<int,string> hash1;
ex) hash_map<int,string> *hash2 = new hash_map<int,string>;

hasp_map의 주요 멤버들
begin 첫 번째 원소의 랜덤 접근 반복자 반환
end 마지막 원소 다음의 반복자 반환
lower_bound 지정한 key의 요서가 있다면 해당 위치의  반복자 반환
