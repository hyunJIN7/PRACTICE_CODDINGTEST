#include<iostream>
#include <cstring>
#include <queue>
#include <tuple>

#define MAX_N 100 
#define DIR_NUM 4
using namespace std;

int N;
int grid[MAX_N][MAX_N];
bool visited[MAX_N][MAX_N];

bool inRange(int y, int x){
	return 0 <= y && y < N && 0 <= x && x < N;
}

int solve(){
	int dy[DIR_NUM] = {1,-1,0,0};
	int dx[DIR_NUM] = {0,0,1,-1};
	priority_queue<tuple<int,int,int> > pq; // 복구 시간,y,x 
	pq.push(make_tuple(0,0,0) );
	visited[0][0] = true;
	while(!pq.empty()){
		int c, cy, cx;
		tie(c,cy,cx) = pq.top();
		pq.pop();
		if(cy == N-1 && cx == N-1) return -c;
		for(int d = 0 ;d < DIR_NUM; d++){
			int ny = cy + dy[d] , nx = cx + dx[d];
			if(!inRange(ny ,nx) || visited[ny][nx] ) continue;
			
			pq.push(make_tuple(c - grid[ny][nx], ny,nx) );
			visited[ny][nx] = true;
		}
	}	
}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	cin>>T;
	for(test_case = 1; test_case <= T; ++test_case)
	{
		memset(visited,0,sizeof(visited));
		cin >> N;
		for(int i = 0 ; i < N ; i++){
			string line; 
			cin >> line;
			for(int j = 0; j < N ; j++){
				grid[i][j] = line[j] - '0';
			}
		}		
		cout << "#" << test_case<<" "<<solve()<<"\n";

	}
	return 0;
}
